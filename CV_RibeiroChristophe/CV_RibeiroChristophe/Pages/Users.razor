@page "/Users"

@attribute [Authorize(Roles = "admin")]

@using CV_RibeiroChristophe.Data
@using CV_RibeiroChristophe.Authentication
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserAccountService userAccountService

<PageTitle>Users List</PageTitle>


@if (ListUsers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr><th><button @onclick="CreateNewUser" class="btn btn-primary">Add User</button></th></tr>
            <tr>
                <th>ID</th>
                <th>Login</th>
                <th>Password</th>
                <th>Role</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in ListUsers)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.login</td>
                    <td>@user.password</td>
                    <td>@user.roleId == Role.name</td>
                    <td><button class="btn btn-primary" @onclick="(() => EditUser(user.Id))"><i class="oi oi-pencil"></i></button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<UserAccount>? ListUsers;

    protected override async Task OnInitializedAsync()
    {
        ListUsers = await userAccountService.GetListUser();
    }

    void CreateNewUser()
    {
        NavigationManager.NavigateTo("/NewUser");
    }

    void EditUser(int id)
    {
        NavigationManager.NavigateTo($"User/{id}");
    }
}
